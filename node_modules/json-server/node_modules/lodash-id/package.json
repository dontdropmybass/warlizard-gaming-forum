{
  "name": "lodash-id",
  "version": "0.13.0",
  "description": "Use JavaScript objects as databases",
  "main": "src/node.js",
  "scripts": {
    "test": "grunt test",
    "build": "grunt",
    "prepush": "npm test",
    "prepublish": "npm run build && pkg-ok"
  },
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/typicode/lodash-id.git"
  },
  "keywords": [
    "underscore",
    "lodash",
    "mixin",
    "database"
  ],
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-browserify": "^3.8.0",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-uglify": "^0.9.1",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-mocha-test": "~0.7.0",
    "husky": "^0.11.8",
    "lodash": "^4.6.1",
    "pkg-ok": "^1.0.1",
    "sinon": "~1.8.1",
    "underscore": "^1.8.3"
  },
  "readme": "# lodash-id [![Build Status](https://travis-ci.org/typicode/lodash-id.svg)](https://travis-ci.org/typicode/lodash-id) [![NPM version](https://badge.fury.io/js/lodash-id.svg)](http://badge.fury.io/js/lodash-id)\n\n> `lodash-id` makes it easy to manipulate id-based resources with [lodash](https://lodash.com/) or [lowdb](https://github.com/typicode/lowdb)\n\n* `getById`\n* `insert`\n* `upsert`\n* `updateById`\n* `updateWhere`\n* `replaceById`\n* `removeById`\n* `removeWhere`\n* `save`\n* `load`\n* `createId`\n\n\n## Install\n\n__Node__\n\n```bash\n$ npm install lodash lodash-id\n```\n\n__Note__ lodash-id is also compatible with [underscore](http://underscorejs.org/)\n\n\n## Usage example\n\n```js\nconst _  = require('lodash')\n\n_.mixin(require('lodash-id'))\n```\n\nCreate an empty database object\n\n```js\nconst db = {\n  posts: []\n}\n```\n\nCreate a post\n\n```js\nconst newPost = _.insert(db.posts, {title: 'foo'})\n```\n\nDisplay database `console.log(db)`\n\n```js\n{\n  posts: [\n    {title: \"foo\", id: \"5ca959c4-b5ab-4336-aa65-8a197b6dd9cb\"}\n  ]\n}\n```\n\nRetrieve post using lodash-id `get` or underscore `find` method\n\n```js\nconst post = _.getById(db.posts, newPost.id)\n\nconst post = _.find(db.posts, function(post) {\n  return post.title === 'foo'\n})\n```\n\nPersist\n\n```js\n_.save(db)\n```\n\n## API\n\nThe following database object is used in API examples.\n\n```js\nconst db = {\n  posts: [\n    {id: 1, body: 'one', published: false},\n    {id: 2, body: 'two', published: true}\n  ],\n  comments: [\n    {id: 1, body: 'foo', postId: 1},\n    {id: 2, body: 'bar', postId: 2}\n  ]\n}\n```\n\n__getById(collection, id)__\n\nFinds and returns document by id or undefined.\n\n```js\nconst post = _.getById(db.posts, 1)\n```\n\n__insert(collection, document)__\n\nAdds document to collection, sets an id and returns created document.\n\n```js\nconst post = _.insert(db.posts, {body: 'New post'})\n```\n\nIf the document already has an id, and it is the same as an existing document in the collection, an error is thrown.\n\n```js\n_.insert(db.posts, {id: 1, body: 'New post'})\n_.insert(db.posts, {id: 1, title: 'New title'}) // Throws an error\n```\n\n__upsert(collection, document)__\n\nAdds document to collection, sets an id and returns created document.\n\n```js\nconst post = _.upsert(db.posts, {body: 'New post'})\n```\n\nIf the document already has an id, it will be used to insert or replace.\n\n```js\n_.upsert(db.posts, {id: 1, body: 'New post'})\n_.upsert(db.posts, {id: 1, title: 'New title'})\n_.getById(db.posts, 1) // {id: 1, title: 'New title'}\n```\n\n__updateById(collection, id, attrs)__\n\nFinds document by id, copies properties to it and returns updated document or undefined.\n\n```js\nconst post = _.updateById(db.posts, 1, {body: 'Updated body'})\n```\n\n__updateWhere(collection, whereAttrs, attrs)__\n\nFinds documents using `_.where`, updates documents and returns updated documents or an empty array.\n\n```js\n// Publish all unpublished posts\nconst posts = _.updateWhere(db.posts, {published: false}, {published: true})\n```\n\n__replaceById(collection, id, attrs)__\n\nFinds document by id, replaces properties and returns document or undefined.\n\n```js\nconst post = _.replaceById(db.posts, 1, {foo: 'bar'})\n```\n\n__removeById(collection, id)__\n\nRemoves document from collection and returns it or undefined.\n\n```js\nconst comment = _.removeById(db.comments, 1)\n```\n\n__removeWhere(collection, whereAttrs)__\n\nRemoves documents from collection using `_.where` and returns removed documents or an empty array.\n\n```js\nconst comments = _.removeWhere(db.comments, {postId: 1})\n```\n\n__save(db, [destination])__\n\nPersists database using localStorage or filesystem. If no destination is specified it will save to `db` or `./db.json`.\n\n```js\n_.save(db)\n_.save(db, '/some/path/db.json')\n```\n\n__load([source])__\n\nLoads database from localStorage or filesystem. If no source is specified it will load from `db` or `./db.json`.\n\n```js\nconst db = _.load()\nconst db = _.load('/some/path/db.json')\n```\n\n__id__\n\nOverwrite it if you want to use another id property.\n\n```js\n_.id = '_id'\n```\n\n__createId(collectionName, doc)__\n\nCalled by lodash-id when a document is inserted. Overwrite it if you want to change id generation algorithm.\n\n```js\n_.createId = function(collectionName, doc) {\n  return collectionName + '-' + doc.name + '-' + _.random(1, 9999)\n}\n```\n\n## FAQ\n\n### How to reduce file size?\n\nWith Lodash, you can create custom builds and include just what you need.\n\n\n```bash\n$ npm install -g lodash-cli\n$ lodash include=find,forEach,indexOf,filter,has\n```\n\nFor more build options, see http://lodash.com/custom-builds.\n\n## Changelog\n\nSee details changes for each version in the [release notes](https://github.com/typicode/lodash-id/releases).\n\n## License\n\nlodash-id is released under the MIT License.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/typicode/lodash-id/issues"
  },
  "_id": "lodash-id@0.13.0",
  "dist": {
    "shasum": "61f7d0ee12f9dc3fecceadb355da683c054a2319"
  },
  "_from": "lodash-id@^0.13.0",
  "_resolved": "https://registry.npmjs.org/lodash-id/-/lodash-id-0.13.0.tgz"
}
